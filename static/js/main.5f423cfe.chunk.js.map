{"version":3,"sources":["components/SimpleAppBar.js","components/SimpleMap.js","App.js","serviceWorker.js","index.js"],"names":["withStyles","root","flexGrow","props","classes","react_default","a","createElement","className","AppBar_default","position","color","Toolbar_default","Typography_default","variant","SimpleMap","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleMapLoad","map","view","setState","loadModules","then","_ref","_ref2","slicedToArray","FeatureLayer","Search","fLayer","url","popupTemplate","title","content","type","fieldInfos","fieldName","label","outFields","actions","id","searchWidget","sources","featureLayer","searchFields","displayField","exactMatch","placeholder","includeDefaultSources","ui","add","when","popup","watch","graphic","getEffectivePopupTemplate","items","visible","attributes","Email","viewModel","on","event","action","_popup$viewModel$sele","selectedFeature","Principal","USER_School_Principal","concat","trim","window","location","href","state","centerPoint","_this2","_ref3","newPoint","Point","latitude","longitude","react","esm","mapProperties","basemap","viewProperties","center","zoom","onLoad","React","App","components_SimpleAppBar","Paper_default","blurb","elevation","target","components_SimpleMap","Component","theme","objectSpread","mixins","gutters","paddingTop","spacing","unit","paddingBottom","margin","height","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5f423cfe.chunk.js","sourcesContent":["import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nconst styles = {\n  root: {\n    flexGrow: 1,\n  },\n};\n\nfunction SimpleAppBar(props) {\n  const { classes } = props;\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\" color=\"default\">\n        <Toolbar>\n          <Typography variant=\"h6\" color=\"inherit\">\n            ArcGIS map with React!\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n\nexport default withStyles(styles)(SimpleAppBar);","import * as React from 'react';\nimport { Map, loadModules } from '@esri/react-arcgis';\n\nclass SimpleMap extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      centerPoint: null,\n      map: null,\n      view: null\n    }\n  }\n\n  componentWillMount() {\n    loadModules([\n      'esri/geometry/Point'\n    ]).then(([ Point ]) => {\n      var newPoint = new Point({ latitude: 29.7174, longitude: -95.4018 })\n\n      this.setState({ centerPoint: newPoint })\n    })\n  }\n\n  handleMapLoad = (map, view) => {\n    this.setState({ map, view }, () => {\n      loadModules([\n        'esri/layers/FeatureLayer',\n        'esri/widgets/Search'\n      ])\n      .then(([\n        FeatureLayer,\n        Search \n      ]) => {\n        var fLayer = new FeatureLayer({ \n          url: 'https://cohegis.houstontx.gov/cohgispub/rest/services/PD/Neighborhood_Services_wm/MapServer/0',\n          popupTemplate: {\n            title: '{CAMPNAME}',\n            content: [{\n              type: 'fields',\n              fieldInfos: [\n                { fieldName: 'CAMPNAME', label: 'Name' },\n                { fieldName: 'DISTNAME', label: 'District' },\n                { fieldName: 'USER_School_Site_Street_Address', label: 'Address' },\n                { fieldName: 'USER_School_Site_City', label: 'City' },\n                { fieldName: 'USER_School_Site_State', label: 'State' },\n                { fieldName: 'USER_School_Site_Zip', label: 'Zip' },\n                { fieldName: 'GRADERANGE', label: 'Grade Range' }\n\n              ]\n            }],\n            outFields: ['USER_School_Principal', 'Email' ],\n            actions: [{\n              id: 'email-principal',\n              title: 'Email Principal',\n              className: 'esri-icon-contact'\n            }]\n          } })\n\n        var searchWidget = new Search({\n          view,\n          sources: [{\n            featureLayer: fLayer,\n            searchFields: [\"CAMPNAME\"],\n            displayField: 'CAMPNAME',\n            exactMatch: false,\n            placeholder: 'Search for School'\n          }],\n          includeDefaultSources: false\n        })\n\n        view.ui.add(searchWidget, {\n          position: 'top-left'\n        })\n        map.add(fLayer)\n\n        view.when(() => {\n          const popup = view.popup\n\n          popup.watch('selectedFeature', (graphic) => {\n            if (graphic) {\n              var graphicTemplate = graphic.getEffectivePopupTemplate()\n\n              graphicTemplate.actions.items[0].visible = graphic.attributes.Email ? true : false\n            }\n          })\n\n          popup.viewModel.on('trigger-action', (event) => {\n            if (event.action.id === 'email-principal') {\n              const { Email, USER_School_Principal: Principal } = popup.viewModel.selectedFeature.attributes\n\n              if (Email) {\n                const url = `mailto:${Email}?subject=ATTN:%20${Principal ? Principal.trim() : 'Principal'}`\n\n                window.location.href = url\n              }\n            }\n          })\n        })\n      })\n    })\n  }\n\n  render() {\n    return <Map \n      mapProperties={{ basemap: 'streets' }}\n      viewProperties={{ center: this.state.centerPoint, zoom: 13 }}\n      onLoad={this.handleMapLoad} />\n  }\n}\n\nexport default SimpleMap;","import React, { Component } from 'react';\nimport './App.css';\nimport SimpleAppBar from './components/SimpleAppBar'\nimport SimpleMap from './components/SimpleMap'\nimport { withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\n\nconst styles = theme => ({\n  root: {\n    ...theme.mixins.gutters(),\n    paddingTop: theme.spacing.unit * 2,\n    paddingBottom: theme.spacing.unit * 2,\n    margin: theme.spacing.unit * 10,\n    height: '600px'\n  },\n  blurb: {\n    ...theme.mixins.gutters(),\n    paddingTop: theme.spacing.unit * 2,\n    paddingBottom: theme.spacing.unit * 2,\n    margin: theme.spacing.unit * 10\n  }\n});\n\nclass App extends Component {\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <div className=\"App\">\n       <SimpleAppBar />\n       <Paper className={classes.blurb} elevation={1}>\n        <p>\n          Built a map using ArcGIS API. It shows all the schools in the Greater Houston Area based on info from Houston's Open Data Portal. Click{' '}\n          <a href=\"https://cohgis-mycity.opendata.arcgis.com/datasets/schools?geometry=-103.506%2C28.016%2C-87.686%2C31.356&orderBy=IN_Street&orderByAsc=false\" target=\"_blank\">here</a>\n          {' '}to see the data. Check the Actions tab to send an email to the School Principal. \n        </p>\n       </Paper>\n       <Paper className={classes.root} elevation={1}>\n        <SimpleMap className=\"ReactMap\" />\n      </Paper>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}